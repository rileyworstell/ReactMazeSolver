{"version":3,"sources":["components/block/block.jsx","components/grid/grid.jsx","algorithms/BFS.js","components/button/button.jsx","components/selected/selected.jsx","components/path/path.jsx","components/color/color.jsx","App.js","algorithms/initializeArr.js","reportWebVitals.js","index.js"],"names":["clickHandler","props","r","L","gridLength","id","Math","floor","c","x","gridArr","startPointSelecter","changeBlock","pointSelecter","Block","colorScheme","onClick","className","Grid","i","push","map","index","s","reconstructPath","e","prev","arr","visitedList","c1","c2","b1","b2","path","undefined","length","reverse","leng","z","unshift","awaitUpdatePath","solve","R","C","dr","dc","parent","rr","cc","q","visited","Array","j","shift","x1","Button","clickDo","recreateGrid","sP","bfs","slowPathRun","text","Selected","console","log","setStart","Path","toString","Color","changeColor","changeScheme","App","updatePathMaze","time","Promise","resolve","reject","setState","setTimeout","initialValues","num","Arr","state","bind","this","fetch","splice","point","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fedd380.chunk.js","sourcesContent":["import React from 'react';\nimport './block.css';\n\nlet clickHandler = (props) => {\n    var r;\n    var L = props.gridLength;\n    if (props.id < L) {\n        r = 0;\n    } else {\n    r = Math.floor(props.id / L);\n    }\n     var c = props.id % L;\n\n    var x = props.gridArr;\n    if (x[r][c] !== \"S\") {\n    if (props.startPointSelecter === 1) {\n        x[r][c] = \"S\"\n        props.changeBlock(x);\n        props.pointSelecter([r, c]);\n    } else {\n        // if the value is equal to no wall then make it a wall\n        if (props.gridArr[r][c] === \"0\") {\n            x[r][c] = \"1\"\n            props.changeBlock(x);\n        }\n        else {\n            x[r][c] = \"0\"\n            props.changeBlock(x);\n        }\n    }\n}\n\n};\n\nexport const Block = (props) => {\n    var r;\n    var L = props.gridLength;\n    if (props.id < L) {\n        r = 0;\n    } else {\n    r = Math.floor(props.id / L);\n    }\n     var c = props.id % L;\n    \n    if (props.gridArr[r][c] === \"0\") {\n        if (props.colorScheme === 2) {\n            return(\n                <div id={props.id} onClick={() => clickHandler(props) }  className={props.className}></div>\n            );\n        } else {\n            return(\n                <div id={props.id} onClick={() => clickHandler(props) }  className={props.className}></div>\n            );\n        }\n\n    }\n    else if(props.gridArr[r][c] === \"S\" ||  props.gridArr[r][c] === \"E\"){\n        if (props.colorScheme === 2) {\n            return(\n                <div id={props.id} onClick={() => clickHandler(props) }  className={`${props.className} blockColorOrange`}></div>\n            );\n        } else {\n            return(\n                <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorBlue`}></div>\n            );\n        }\n    }\n    else if(props.gridArr[r][c] === \"V\"){\n        if (props.colorScheme === 2) {\n            return(\n                <div id={props.id} onClick={() => clickHandler(props) }  className={`${props.className} blockColorGray`}></div>\n            );\n        } else {\n        return(\n            <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorYellow`}></div>\n        );\n        }\n    }\n    else if(props.gridArr[r][c] === \"Solved\"){\n        if (props.colorScheme === 2) {\n            return(\n                <div id={props.id} onClick={() => clickHandler(props) }  className={`${props.className} blockColorPurple`}></div>\n            );\n        } else {\n        return(\n            <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorGreen`}></div>\n        );\n        }\n    }\n    else {\n        if (props.colorScheme === 2) {\n            return(\n                <div id={props.id} onClick={() => clickHandler(props) }  className={`${props.className} blockColorBlack`}></div>\n            );\n        } else {\n        return(\n            <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorRed`}></div>\n        );\n        }\n    }\n}","import React from 'react';\nimport './grid.css';\nimport { Block } from '../block/block.jsx'\n\nexport const Grid = (props) => {\n    var arr = props.gridArr;\n    var x = [];\n    for (var i = 0; i < props.gridLength * props.gridLength; i++) {\n      x.push(i);\n    }\n    return(\n    <div className={props.className}>\n      {/* The below creates the main grid with Blocks */}\n      {x.map((x,index) => {\n        return <Block colorScheme={props.colorScheme} s={props.s} pointSelecter={props.pointSelecter} startPointSelecter={props.startPointSelecter} gridLength={props.gridLength} changeBlock={props.changeBlock} gridArr={props.gridArr} className=\"block\" key={index} id={index} />;\n      })}\n    </div>\n    );\n}\n","\nexport const bfs = (props, arr, sP) => {\n    var s;\n    if (sP !== null) {\n        s = sP\n        arr[s[0]][s[1]] = \"S\";\n    }\n    else {\n        arr[0][0] = \"S\"\n        s = [0, 0];\n    }\n    var prev;\n    var visitedList = [];\n    var R = 10;\n    var C = 10;\n    var dr = [-1, 1, 0, 0];\n    var dc = [0, 0, 1, -1];\n    // put an ending point\n    arr[9][9] = \"E\"\n\n    var e = [9, 9];\n\n    props.changeBlock(arr);\n\n    prev = solve(s, prev, R, C, dr, dc, arr, props, visitedList)\n\n    return reconstructPath(s, e, prev, arr, props, visitedList)\n}\n\nexport const reconstructPath = (s, e, prev, arr, props, visitedList) => {\n    var c1;\n    var c2;\n    var b1;\n    var b2;\n    var path = [];\n    if (prev === undefined) {\n        return;\n    } else {\n    path.push([prev[0][0]])\n    for (var i = 0; i < prev.length; i++) {\n        c1 = path[path.length-1][0][0]\n        c2 = path[path.length-1][0][1]\n        b1 = prev[i][1][0][0]\n        b2 = prev[i][1][0][1]\n        if (c1 === b1){\n            if (c2 === b2 +1 || c2 === b2 - 1){\n                path.push(prev[i][1])\n            }\n        }\n        if (c2 === b2){\n            if (c1 === b1 + 1 || c1 === b1 - 1) {\n                path.push(prev[i][1])\n            }}\n\n    }\n    path.reverse()\n\n    var x = arr;\n    var leng = visitedList.length;\n    // push visited spots to beginning of path before calling awaitUpdatePath\n    for (var z = 0; z < visitedList.length; z++) {\n      path.unshift([visitedList[z]]);\n    }\n    props.awaitUpdatePath(x, path, s, e, leng );\n    }\n}\n\n\nexport const solve = (s, prev, R, C, dr, dc, arr, props, visitedList) => {\n\tvar rr = 0;\n\tvar cc = 0;\n\tvar parent;\n  var r = s[0];\n  var c = s[1];\n  var q = [];\n  prev = [];\n  q.push([r, c]);\n  var visited = [];\n  for (var i = 0; i < 10; i++) {\n    visited[i] = new Array(10);\n  }\n  for (i = 0; i < 10; i++) {\n    for (var j = 0; j < 10; j++) {\n        visited[i][j] = 0;\n    }\n  }\n  visited[r][c] = 1;\n  visitedList.unshift([r, c]);\n//   props.updateVisited(r, c);\n\n  \n  while (q.length !== 0) {\n  \tr = q[0][0];\n    c = q[0][1];\n    parent = q.shift();\n    \n    for (var x1 = 0; x1 < 4; x1++) {\n    \trr = r + dr[x1];\n        cc = c + dc[x1];\n      \tif (rr < 0 || cc < 0) {\n          continue;\n      \t}\n        if (rr >= R || cc >= C) {\n          continue;\n    \t\t}\n    \t\tif (arr[rr][cc] === \"E\"){\n        \t\tprev.push([[rr, cc], [parent]]);\n            prev.shift();\n            prev.reverse();\n            return prev;\n         }\n         if (arr[rr][cc] === \"1\") {\n                 continue;\n         }\n\n         if (visited[rr][cc] !== 1) {\n         \tq.push([rr, cc]);\n          visited[rr][cc] = 1;\n          visitedList.unshift([r, c]);\n          prev.push([[rr, cc], [parent]]);\n         }\n  }\n  \n}\n}\n\n","import React from 'react';\nimport './button.css';\nimport { bfs } from '../../algorithms/BFS.js'\n\nexport const Button = (props) => {\n    return(\n    <button onClick={() => {\n        if (props.clickDo === 'bfs') {\n            if (props.path !== null) {\n                props.recreateGrid();\n            }else {\n        bfs(props, props.gridArr, props.s, props.slowPathRun)\n            }\n        } else {\n            props.recreateGrid();\n        }\n    }} className={props.className}>{props.text}\n    </button>\n    );\n}","import React from 'react';\nimport './selected.css';\n\nlet setStart = (props) => {\n    console.log(props.startPointSelecter);\n    props.pointSelecter()\n}\n\nexport const Selected = (props) => {\n    return(\n    <button onClick={() => setStart(props)} className={props.className}>{props.text}\n    </button>\n    );\n}","import React from 'react';\nimport './path.css';\n\n\nexport const Path = (props) => {\n    if (props.path) {\n        var x = \"\";\n       for (var i = 0; i < props.path.length; i++) {\n           x = x + (\"[\" + props.path[i].toString() + \"]\");\n       }\n       return(\n        <div>Your Path: {x}</div>\n        );\n        \n    }else {\n    return(\n    <div></div>\n    );\n    }\n}","import React from 'react';\nimport './color.css';\n\nlet changeScheme = (props) => {\n    props.changeColor()\n}\n\nexport const Color = (props) => {\n    return(\n    <button onClick={() => changeScheme(props)} className={'colorButton'}>{props.text}\n    </button>\n    );\n}","import './App.css';\nimport React, { Component} from 'react';\nimport {Grid} from './components/grid/grid.jsx'\nimport {Button} from './components/button/button.jsx'\nimport {Selected} from './components/selected/selected.jsx'\nimport {Path} from './components/path/path.jsx'\nimport {Arr} from './algorithms/initializeArr'\nimport {Color} from './components/color/color.jsx'\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    let initialValues = Arr();\n    var arr = initialValues[0];\n    var num = initialValues[1];\n    this.state = {\n      gridArr: arr,\n      gridLength: num,\n      startPointSelecter: 0 ,\n      s: null,\n      path: null,\n      colorScheme: 2\n    };\n    this.changeBlock = this.changeBlock.bind(this);\n    this.recreateGrid = this.recreateGrid.bind(this);\n    this.pointSelecter = this.pointSelecter.bind(this);\n    this.recreateGrid = this.recreateGrid.bind(this);\n    this.updatePathMaze = this.updatePathMaze.bind(this);\n    this.awaitUpdatePath = this.awaitUpdatePath.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n\nchangeBlock(x, path=null) {\n  if (path !== null) {\n    this.setState({gridArr: x,  path: path});\n  }\n  this.setState({gridArr: x});\n}\n\nupdatePathMaze = (x, i, leng) => {\n  var time = 15;\n  if (i > leng) {\n    time =100;\n  }\n  let promise = new Promise((resolve, reject) => {\n    this.setState({gridArr: x}, () => {\n      setTimeout(() => { \n      i++;\n      resolve(i);\n    }, time);\n    });\n  });\n    return promise;\n}\n\n\nasync awaitUpdatePath(x, path, s, e, leng) {\n  // i is the promise and when the promise is returned it is incremented (this is for UI purposes)\n  var i = 0;\n  while ( i < path.length) {\n    // the first part of path is all of the visited up until the variable length and then that is the path to solve\n    if ( i <= leng) {\n      x[path[i][0][0]][path[i][0][1]] = \"V\";\n    } else {\n      x[path[i][0][0]][path[i][0][1]] = \"Solved\";\n    }\n    const fetch = await this.updatePathMaze(x, i, leng);\n    i = fetch;\n  }\n\n  // resets starting and ending points\n  x[s[0]][s[1]] = \"S\";\n  x[e[0]][e[1]] = \"E\";\n  // this splits that path to solve from the whole path\n  path.splice(0, leng);\n  this.setState({gridArr: x, path: path});\n \n}\n\npointSelecter(point) {\n    if (point !== [-1, -1]) {\n      this.setState({startPointSelecter: this.state.startPointSelecter + 1,\n                  s: point});\n    }else {\n     this.setState({startPointSelecter: this.state.startPointSelecter + 1});\n    }\n}\n\nchangeColor() {\n if (this.state.colorScheme !== 2) {\n   this.setState({colorScheme: 2});\n }\n else {\n  this.setState({colorScheme: 1});\n }\n}\n\nrecreateGrid() {\n  var arr = [];\n  var num = 10;\n  for (var i = 0; i < num; i++) {\n    arr[i] = new Array(num);\n  }\n  for (i = 0; i < num; i++) {\n    for (var j = 0; j < num; j++) {\n        arr[i][j] = \"0\";\n    }\n  }\n  arr[num-1][num-1] = \"E\";\n  this.setState({gridArr: arr,\n                startPointSelecter: 0 ,\n                s: null,\n                path: null,\n  }); \n}\n  render() {\n  return (\n    <div className=\"App\">\n     <div>This is a maze solver!\n       <br/> Select Blocks to make them walls (red) and optionally select starting point and make a blue block. \n       <br/> Yellow will show the algorithm working and Green is the path. \n       <br/> Then start the BFS. \n       <br/> If you do not select a start point, one will be assigned for you. </div>\n\n     <Selected startPointSelecter={this.state.startPointSelecter} \n          pointSelecter={this.pointSelecter}\n          className={\"selectedButton\"}\n          text={\"Set Starting Point\"}/>\n\n\n    <Button gridLength={this.state.gridLength} \n          clickDo={'recreateGrid'}\n          recreateGrid={this.recreateGrid}\n          path={this.state.path}\n          changeBlock={this.changeBlock} \n          gridArr={this.state.gridArr} \n          className={\"redButton\"} \n          text={\"Restart Grid\"}/>\n\n     <Button gridLength={this.state.gridLength} \n          clickDo={'bfs'}\n          awaitUpdatePath={this.awaitUpdatePath}\n          path={this.state.path}\n          changeBlock={this.changeBlock} \n          recreateGrid={this.recreateGrid}\n          gridArr={this.state.gridArr} \n          className={\"button\"} \n          s={this.state.s}\n          text={\"Start BFS\"}/>\n\n          <Color changeColor={this.changeColor} text={\"Switch Colors\"} />\n     <div></div> \n     <Grid gridLength={this.state.gridLength} \n          colorScheme={this.state.colorScheme}\n          changeBlock={this.changeBlock} \n          gridArr={this.state.gridArr} \n          s={this.state.s}\n          startPointSelecter={this.state.startPointSelecter}\n          pointSelecter={this.pointSelecter}\n          className=\"mainGrid\"/> \n          <br />\n          <br />\n          <Path path={this.state.path}/>\n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n","\nexport const Arr = () => {\n    // Creates Array to be able to map over the blocks\n    var arr = [];\n    var num = 10;\n    for (var i = 0; i < num; i++) {\n        arr[i] = new Array(num);\n    }\n    for (i = 0; i < num; i++) {\n        for (var j = 0; j < num; j++) {\n            arr[i][j] = \"0\";\n        }\n    }\n    arr[num-1][num-1] = \"E\";\n    return [arr, num];\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}