{"version":3,"sources":["App.js","components/block/block.jsx","components/grid/grid.jsx","algorithms/BFS.js","components/button/button.jsx","components/selected/selected.jsx","components/path/path.jsx","reportWebVitals.js","index.js"],"names":["clickHandler","props","r","L","gridLength","id","Math","floor","c","x","gridArr","startPointSelecter","changeBlock","pointSelecter","Block","onClick","className","Grid","i","push","map","index","s","reconstructPath","e","prev","arr","c1","c2","b1","b2","path","undefined","length","reverse","awaitUpdatePath","solve","R","C","dr","dc","parent","rr","cc","q","visited","Array","j","shift","x1","Button","clickDo","recreateGrid","sP","bfs","slowPathRun","text","Selected","console","log","setStart","Path","toString","App","updatePathMaze","promise","Promise","resolve","reject","setState","setTimeout","state","bind","this","fetch","point","num","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ce1c59f.chunk.js","sourcesContent":["import './App.css';\nimport React, { Component} from 'react';\nimport {Grid} from './components/grid/grid.jsx'\nimport {Button} from './components/button/button.jsx'\nimport {Selected} from './components/selected/selected.jsx'\nimport {Path} from './components/path/path.jsx'\n\n// Creates Array to be able to map over the blocks\nvar arr = [];\nvar num = 10;\nfor (var i = 0; i < num; i++) {\n  arr[i] = new Array(num);\n}\nfor (i = 0; i < num; i++) {\n  for (var j = 0; j < num; j++) {\n      arr[i][j] = \"0\";\n  }\n}\narr[9][9] = \"E\";\n\n// End of creating array\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridArr: arr,\n      gridLength: num,\n      startPointSelecter: 0 ,\n      s: null,\n      path: null,\n    };\n    this.changeBlock = this.changeBlock.bind(this);\n    this.recreateGrid = this.recreateGrid.bind(this);\n    this.pointSelecter = this.pointSelecter.bind(this);\n    this.recreateGrid = this.recreateGrid.bind(this);\n    this.updatePathMaze = this.updatePathMaze.bind(this);\n    this.awaitUpdatePath = this.awaitUpdatePath.bind(this);\n\n  }\n\n\nchangeBlock(x, path=null) {\n  if (path !== null) {\n    console.log(path);\n    this.setState({gridArr: x,  path: path});\n  }\n  this.setState({gridArr: x});\n}\n\nupdatePathMaze = (x, i) => {\n  let promise = new Promise((resolve, reject) => {\n    this.setState({gridArr: x}, () => {\n      setTimeout(() => { \n      i++;\n      resolve(i);\n    }, 250);\n\n    });\n  });\n\n  \n  console.log('promise that returns the new integer');\n    return promise;\n}\n\n\nasync awaitUpdatePath(x, path, s, e, visited) {\n  debugger;\n  var i = 0;\n  while ( i < path.length) {\n    x[path[i][0][0]][path[i][0][1]] = \"Solved\";\n    console.log(x);\n    const fetch = await this.updatePathMaze(x, i);\n    console.log(fetch);\n    i = fetch;\n  }\n\n  x[s[0]][s[1]] = \"S\";\n  x[e[0]][e[1]] = \"E\";\n  this.setState({gridArr: x, path: path});\n \n}\n\n\n// return the path to here and call a changeBlockSlowly(x, path) and do a this.setState({gridArr: x},() => {})  https://stackoverflow.com/questions/42018342/is-there-a-synchronous-alternative-of-setstate-in-reactjs\n\npointSelecter(point) {\n    if (point !== [-1, -1]) {\n      this.setState({startPointSelecter: this.state.startPointSelecter + 1,\n                  s: point});\n    }else {\n     this.setState({startPointSelecter: this.state.startPointSelecter + 1});\n    }\n}\n\nrecreateGrid() {\n  var arr = [];\n  var num = 10;\n  for (var i = 0; i < num; i++) {\n    arr[i] = new Array(num);\n  }\n  for (i = 0; i < num; i++) {\n    for (var j = 0; j < num; j++) {\n        arr[i][j] = \"0\";\n    }\n  }\n  arr[num-1][num-1] = \"E\";\n  this.setState({gridArr: arr,\n                startPointSelecter: 0 ,\n                s: null,\n                path: null,\n  }); \n}\n  render() {\n  return (\n    <div className=\"App\">\n     <div>This is a maze solver! <br/> Select Blocks to make them walls (red) and optionally select starting point and make a blue block. <br/>Then start the BFS. <br/> If you do not select a start point, one will be assigned for you. </div>\n\n     <Selected startPointSelecter={this.state.startPointSelecter} \n          pointSelecter={this.pointSelecter}\n          className={\"selectedButton\"}\n          text={\"Set Starting Point\"}/>\n\n\n    <Button gridLength={this.state.gridLength} \n          clickDo={2}\n          recreateGrid={this.recreateGrid}\n          path={this.state.path}\n          changeBlock={this.changeBlock} \n          gridArr={this.state.gridArr} \n          className={\"redButton\"} \n          text={\"Restart Grid\"}/>\n\n     <Button gridLength={this.state.gridLength} \n          clickDo={1}\n          awaitUpdatePath={this.awaitUpdatePath}\n          path={this.state.path}\n          changeBlock={this.changeBlock} \n          recreateGrid={this.recreateGrid}\n          gridArr={this.state.gridArr} \n          className={\"button\"} \n          s={this.state.s}\n          text={\"Start BFS\"}/>\n     <div></div> \n     <Grid gridLength={this.state.gridLength} \n          changeBlock={this.changeBlock} \n          gridArr={this.state.gridArr} \n          s={this.state.s}\n          startPointSelecter={this.state.startPointSelecter}\n          pointSelecter={this.pointSelecter}\n          className=\"mainGrid\"/> \n          <Path path={this.state.path}/>\n          {/* <div id=\"path\">Your Path: {() => {this.state.path.map((n) => n); }}</div> */}\n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './block.css';\n\nlet clickHandler = (props) => {\n    var r;\n    var L = props.gridLength;\n    if (props.id < L) {\n        r = 0;\n    } else {\n    r = Math.floor(props.id / L);\n    }\n     var c = props.id % L;\n\n    var x = props.gridArr;\n    if (x[r][c] !== \"S\") {\n    if (props.startPointSelecter === 1) {\n        x[r][c] = \"S\"\n        props.changeBlock(x);\n        props.pointSelecter([r, c]);\n    } else {\n        // if the value is equal to no wall then make it a wall\n        if (props.gridArr[r][c] === \"0\") {\n            x[r][c] = \"1\"\n            props.changeBlock(x);\n        }\n        else {\n            x[r][c] = \"0\"\n            props.changeBlock(x);\n        }\n    }\n}\n\n};\n\nexport const Block = (props) => {\n    var r;\n    var L = props.gridLength;\n    if (props.id < L) {\n        r = 0;\n    } else {\n    r = Math.floor(props.id / L);\n    }\n     var c = props.id % L;\n    \n    if (props.gridArr[r][c] === \"0\") {\n    return(\n        <div id={props.id} onClick={() => clickHandler(props) }  className={props.className}></div>\n    );\n    }\n    else if(props.gridArr[r][c] === \"S\" ||  props.gridArr[r][c] === \"E\"){\n        return(\n            <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorBlue`}></div>\n        );\n    }\n    else if(props.gridArr[r][c] === \"V\"){\n        return(\n            <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorYellow`}></div>\n        );\n    }\n    else if(props.gridArr[r][c] === \"Solved\"){\n        return(\n            <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorGreen`}></div>\n        );\n    }\n    else {\n        return(\n            <div id={props.id} onClick={() => clickHandler(props) } className={`${props.className} blockColorRed`}></div>\n        );\n    }\n}","import React from 'react';\nimport './grid.css';\nimport { Block } from '../block/block.jsx'\n\nexport const Grid = (props) => {\n    var arr = props.gridArr;\n    var x = [];\n    for (var i = 0; i < props.gridLength * props.gridLength; i++) {\n      x.push(i);\n    }\n    return(\n    <div className={props.className}>\n      {/* The below creates the main grid with Blocks */}\n      {x.map((x,index) => {\n        return <Block s={props.s} pointSelecter={props.pointSelecter} startPointSelecter={props.startPointSelecter} gridLength={props.gridLength} changeBlock={props.changeBlock} gridArr={props.gridArr} className=\"block\" key={index} id={index} />;\n      })}\n    </div>\n    );\n}\n","\nexport const bfs = (props, arr, sP) => {\n    var s;\n    if (sP !== null) {\n        s = sP\n        arr[s[0]][s[1]] = \"S\";\n    }\n    else {\n        arr[0][0] = \"S\"\n        s = [0, 0];\n    }\n    var prev;\n    var R = 10;\n    var C = 10;\n    var dr = [-1, 1, 0, 0];\n    var dc = [0, 0, 1, -1];\n    // put an ending point\n    arr[9][9] = \"E\"\n\n    var e = [9, 9];\n\n    props.changeBlock(arr);\n\n    prev = solve(s, prev, R, C, dr, dc, arr, props)\n\n    return reconstructPath(s, e, prev, arr, props)\n}\n\nexport const reconstructPath = (s, e, prev, arr, props) => {\n    var c1;\n    var c2;\n    var b1;\n    var b2;\n    var path = [];\n    if (prev == undefined) {\n        return;\n    } else {\n    path.push([prev[0][0]])\n    for (var i = 0; i < prev.length; i++) {\n        c1 = path[path.length-1][0][0]\n        c2 = path[path.length-1][0][1]\n        b1 = prev[i][1][0][0]\n        b2 = prev[i][1][0][1]\n        if (c1 === b1){\n            if (c2 === b2 +1 || c2 === b2 - 1){\n                path.push(prev[i][1])\n            }\n        }\n        if (c2 === b2){\n            if (c1 === b1 + 1 || c1 === b1 - 1) {\n                path.push(prev[i][1])\n            }}\n\n    }\n    path.reverse()\n\n\n    // return path\n\n    //\n    var x = arr;\n\n    // this is not working as expected because it is calling setState in a loop\n            // for (var z = 0; z < path.length - 1; z++) {\n            //     x[path[z][0][0]][path[z][0][1]] = \"Solved\"\n            //     props.changeBlock(x);\n            // }\n            //     // starting point sometimes gets added to path\n            //     x[s[0]][s[1]] = \"S\"\n            //     props.changeBlock(x, path);    \n\n        \n        props.awaitUpdatePath(x, path, s, e );\n    }\n}\n\n\nexport const solve = (s, prev, R, C, dr, dc, arr, props) => {\n\tvar rr = 0;\n\tvar cc = 0;\n\tvar parent;\n  var r = s[0];\n  var c = s[1];\n  var q = [];\n  prev = [];\n  q.push([r, c]);\n  var visited = [];\n  for (var i = 0; i < 10; i++) {\n    visited[i] = new Array(10);\n  }\n  for (i = 0; i < 10; i++) {\n    for (var j = 0; j < 10; j++) {\n        visited[i][j] = 0;\n    }\n  }\n  visited[r][c] = 1;\n//   props.updateVisited(r, c);\n\n  \n  while (q.length !== 0) {\n  \tr = q[0][0];\n    c = q[0][1];\n    parent = q.shift();\n    \n    for (var x1 = 0; x1 < 4; x1++) {\n    \trr = r + dr[x1];\n        cc = c + dc[x1];\n      \tif (rr < 0 || cc < 0) {\n          continue;\n      \t}\n        if (rr >= R || cc >= C) {\n          continue;\n    \t\t}\n    \t\tif (arr[rr][cc] === \"E\"){\n        \t\tprev.push([[rr, cc], [parent]]);\n            prev.shift();\n            prev.reverse();\n            return prev;\n         }\n         if (arr[rr][cc] === \"1\") {\n                 continue;\n         }\n\n         if (visited[rr][cc] !== 1) {\n         \tq.push([rr, cc]);\n          visited[rr][cc] = 1;\n          prev.push([[rr, cc], [parent]]);\n         }\n  }\n  \n}\n}\n\n// bfs(s, e);\n","import React from 'react';\nimport './button.css';\nimport { bfs } from '../../algorithms/BFS.js'\n\nexport const Button = (props) => {\n    return(\n    <button onClick={() => {\n        if (props.clickDo === 1) {\n            if (props.path !== null) {\n                props.recreateGrid();\n            }else {\n        bfs(props, props.gridArr, props.s, props.slowPathRun)\n            }\n        } else {\n            props.recreateGrid();\n        }\n    }} className={props.className}>{props.text}\n    </button>\n    );\n}","import React from 'react';\nimport './selected.css';\n\nlet setStart = (props) => {\n    console.log(props.startPointSelecter);\n    props.pointSelecter()\n}\n\nexport const Selected = (props) => {\n    return(\n    <button onClick={() => setStart(props)} className={props.className}>{props.text}\n    </button>\n    );\n}","import React from 'react';\nimport './path.css';\n\n\nexport const Path = (props) => {\n    if (props.path) {\n        var x = \"\";\n       for (var i = 0; i < props.path.length; i++) {\n           x = x + (\"[\" + props.path[i].toString() + \"]\");\n       }\n       return(\n        <div>Your Path: {x}</div>\n        );\n        \n    }else {\n    return(\n    <div></div>\n    );\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}